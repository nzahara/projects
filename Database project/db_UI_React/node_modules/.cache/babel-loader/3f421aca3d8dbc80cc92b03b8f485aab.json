{"ast":null,"code":"'use strict';\n\nvar has = Object.prototype.hasOwnProperty,\n    monster = require('koekiemonster'),\n    qs = require('querystringify'),\n    storage = {},\n    prefix = 'ยง',\n    cookie; //\n// The export interface of the cookie-monster module is quite odd, if there is\n// no `document` in global it will simply not export the `get` and `set`\n// methods. Causing this module to fail on `undefined` function calls. Default\n// to an empty object when document doesn't exists solves it.\n//\n\n\ncookie = monster('undefined' !== typeof document ? document : {});\n/**\n * Refresh the storage as other users might also be writing against it.\n *\n * @api private\n */\n\nfunction update() {\n  if (!koekje.supported) return;\n  var data = cookie.getItem('koekje'),\n      length = 0,\n      key;\n  storage = data && data.charAt(0) === prefix ? qs.parse(data.slice(1)) : {};\n\n  for (key in storage) {\n    if (has.call(storage, key)) length++;\n  }\n\n  koekje.length = length;\n}\n\nvar koekje = module.exports = {\n  /**\n   * The total number items stored in the storage.\n   *\n   * @type {Number}\n   * @public\n   */\n  length: 0,\n\n  /**\n   * Find an item in the storage.\n   *\n   * @param {String} key Name of the value we lookup.\n   * @returns {String|Null} Found item or null.\n   * @api public\n   */\n  getItem: function getItem(key) {\n    if (has.call(storage, key)) return storage[key];\n    return null;\n  },\n\n  /**\n   * Add a new item in the storage.\n   *\n   * @param {String} key Name under which we store the value.\n   * @param {String} value Value for the key.\n   * @returns {Undefined}\n   * @api public\n   */\n  setItem: function setItem(key, value) {\n    storage[key] = value;\n    cookie.setItem('koekje', qs.stringify(storage, prefix));\n    koekje.length++;\n  },\n\n  /**\n   * Remove a single item from the storage.\n   *\n   * @param {String} key Name of the value we need to remove.\n   * @returns {Undefined}\n   * @api pubilc\n   */\n  removeItem: function removeItem(key) {\n    delete storage[key];\n    cookie.setItem('koekje', qs.stringify(storage, prefix));\n    koekje.length--;\n  },\n\n  /**\n   * Completely remove all items from the store.\n   *\n   * @returns {Undefined}\n   * @api pubilc\n   */\n  clear: function clear() {\n    storage = {};\n    cookie.setItem('koekje', '', {\n      expires: new Date(0)\n    });\n    koekje.length = 0;\n  },\n\n  /**\n   * Is this storage system supported in the current environment.\n   *\n   * @type {Boolean}\n   * @public\n   */\n  supported: function supported() {\n    return 'object' === typeof navigator && navigator.cookieEnabled;\n  }(),\n\n  /**\n   * Completely re-initiate the storage.\n   *\n   * @type {Function}\n   * @api private\n   */\n  update: update\n}; //\n// Make sure that we initialize the storage so it pre-fills the `.length`\n//\n\nupdate();","map":null,"metadata":{},"sourceType":"script"}