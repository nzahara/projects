{"ast":null,"code":"//\n// Default storage lookups, and clean object to prevent override of build-in\n// properties.\n//\nvar has = Object.prototype.hasOwnProperty;\nvar storage = {};\nvar clean = {};\n/**\n * Calculate the lenght of the storage object.\n *\n * @returns {Number} Lenght\n * @private\n */\n\nfunction length() {\n  var result = 0;\n\n  for (var key in storage) {\n    result++;\n  }\n\n  return result;\n}\n/**\n * objStorage is sessionStorage/localStorage backed by an plain Object.\n *\n * @type {Object}\n * @public\n */\n\n\nvar objStorage = module.exports = {\n  /**\n   * The total number items stored in the storage.\n   *\n   * @type {Number}\n   * @public\n   */\n  length: length(),\n\n  /**\n   * Find an item in the storage.\n   *\n   * @param {String} key Name of the value we lookup.\n   * @returns {String|Null} Found item or null.\n   * @public\n   */\n  getItem: function getItem(key) {\n    if (has.call(storage, key)) return storage[key];\n    return null;\n  },\n\n  /**\n   * Add a new item in the storage.\n   *\n   * @param {String} key Name under which we store the value.\n   * @param {String} value Value for the key.\n   * @returns {Undefined}\n   * @public\n   */\n  setItem: function setItem(key, value) {\n    if (!(key in clean)) {\n      storage[key] = value;\n    }\n\n    objStorage.length = length();\n  },\n\n  /**\n   * Remove a single item from the storage.\n   *\n   * @param {String} key Name of the value we need to remove.\n   * @returns {Undefined} Stuff.\n   * @pubilc\n   */\n  removeItem: function removeItem(key) {\n    delete storage[key];\n    objStorage.length = length();\n  },\n\n  /**\n   * Completely remove all items from the store.\n   *\n   * @returns {Undefined}\n   * @public\n   */\n  clear: function clear() {\n    storage = {};\n    objStorage.length = 0;\n  },\n\n  /**\n   * Is this storage system supported in the current environment.\n   *\n   * @type {Boolean}\n   * @public\n   */\n  supported: true\n};","map":null,"metadata":{},"sourceType":"script"}